<?xml version="1.0" encoding="UTF-8"?>
<opml version="2.0">
  <head>
    <title></title>
    <dateModified></dateModified>
    <ownerName></ownerName>
  </head>
  <body>
<outline text="算法平台">
  <outline text="组件构建" _note="当一个项目多处用到表单、表格，样式也基本相同时，可以考虑抽取组件，一方面可以避免重复开发、代码冗余，另一方面也可以防止多人开发导致的样式有细微的出入。&#10;&#10;但是构建的组件必须保证具有原子性，可复用性，可修改可自定义性，使用简单、可读性和易于维护性。&#10;&#10;对前端同事构建的组件进行了学习和总结，并写了demo练习。">
    <outline text="表单组件的难点">
      <outline text="辨别用户需要哪些元素" _note="首先要知道用户需要几个元素，具体是什么元素。所以用户需要给组件传一个数组，该数组由对象组成，且对象中有字段type用于辨别元素类型。组件中写好el-form外框架，循环el-form-item，再判断el-form-item内部的元素具体是什么。">
      </outline>
      <outline text="插槽实现向组件插入自定义内容" _note="子组建中使用&lt;slot :name=&quot;`${item.slotName}`&quot;&gt;&lt;/slot&gt;标签，父组件使用&#10;&lt;template v-slot:slotNamePar&gt;，传参slotName: 'slotNamePar'。">
      </outline>
      <outline text="注意表单元素有自带的插槽" _note="例el-input有prefix、suffix、prepend、append，写进组件有利于拓展组件功能，增加可复用性。">
      </outline>
      <outline text="注意子组件给父组件传递函数" _note="当遇到，子组件需要给父组件传递函数时，例如&lt;el-upload&gt;上传文件前需要自定义一些其他的操作，则需要父组件将函数传递给子组件，由于data中无法调用method函数，所以将子组件通过传参的方式获取父组件的函数，所以父组件将函数定义在参数中&#10;&#10;``` {.javascript}&#10;handleRemove: () =&gt; {&#10;    console.log(1111)&#10;},&#10;```">
      </outline>
      <outline text="父组件demo：form.vue" _note="``` {.vue}&#10;&lt;template&gt;&#10;  &lt;div class=&quot;form&quot;&gt;&#10;    &lt;baseForm :formProps=&quot;formProps&quot;&gt;&#10;      &lt;template v-slot:slotNamePar&#10;        &gt;具名插槽添加任意内容&#10;        &lt;el-button type=&quot;primary&quot;&gt;插入按钮&lt;/el-button&gt;&#10;        &lt;br /&gt;&#10;        &lt;i class=&quot;el-icon-edit&quot;&gt; 插入图标&lt;/i&gt;&#10;      &lt;/template&gt;&#10;    &lt;/baseForm&gt;&#10;  &lt;/div&gt;&#10;&lt;/template&gt;&#10;&#10;&lt;script&gt;&#10;import baseForm from './components/baseForm.vue'&#10;&#10;export default {&#10;  name: 'form',&#10;  components: { baseForm },&#10;  data() {&#10;    return {&#10;      formProps: [&#10;        {&#10;          label: 'input框',&#10;          type: 'input',&#10;        },&#10;        { label: '单选框', type: 'radio', value: ['标签1', '标签2'] },&#10;        { label: '文字标签', type: 'text', text: '文字内容' },&#10;        { type: 'slot', label: 'slot', slotName: 'slotNamePar' },&#10;        {&#10;          label: '上传文件',&#10;          type: 'upload',&#10;          url: 'https://jsonplaceholder.typicode.com/posts/',&#10;          fileList: [],&#10;          handleRemove: () =&gt; {&#10;            console.log(1111)&#10;          },&#10;          beforeUpload: () =&gt; {&#10;            console.log(2222)&#10;          },&#10;        },&#10;      ],&#10;    }&#10;  },&#10;}&#10;&lt;/script&gt;&#10;```">
      </outline>
      <outline text="子组件demo：baseForm.vue" _note="``` {.vue}&#10;&lt;template&gt;&#10;  &lt;div class=&quot;base-form&quot;&gt;&#10;    &lt;el-form ref=&quot;form&quot; :model=&quot;form&quot; label-width=&quot;80px&quot;&gt;&#10;      &lt;template v-for=&quot;(item, index) in formProps&quot;&gt;&#10;        &lt;el-form-item v-if=&quot;item&quot; :label=&quot;`${item.label}`&quot; :key=&quot;index&quot;&gt;&#10;          &lt;span v-if=&quot;item.type === 'text'&quot;&gt;{{ item.text }}&lt;/span&gt;&#10;          &lt;el-input v-model=&quot;form.name&quot; v-if=&quot;item.type === 'input'&quot;&gt;&lt;/el-input&gt;&#10;          &lt;el-radio-group v-model=&quot;form.resource&quot; v-if=&quot;item.type === 'radio'&quot;&gt;&#10;            &lt;template v-for=&quot;(valueItem, valueIndex) in item.value&quot;&gt;&#10;              &lt;el-radio :label=&quot;valueItem&quot; :key=&quot;valueIndex&quot;&gt;&lt;/el-radio&gt;&#10;            &lt;/template&gt;&#10;          &lt;/el-radio-group&gt;&#10;          &lt;slot v-if=&quot;item.type === 'slot'&quot; :name=&quot;`${item.slotName}`&quot; /&gt;&#10;          &lt;el-upload&#10;            v-if=&quot;item.type === 'upload'&quot;&#10;            class=&quot;upload-demo&quot;&#10;            :action=&quot;item.url&quot;&#10;            :before-upload=&quot;item.beforeUpload&quot;&#10;            :on-remove=&quot;item.handleRemove&quot;&#10;            multiple&#10;            :limit=&quot;3&quot;&#10;            :file-list=&quot;item.fileList&quot;&#10;          &gt;&#10;            &lt;el-button size=&quot;small&quot; type=&quot;primary&quot;&gt;点击上传&lt;/el-button&gt;&#10;            &lt;div slot=&quot;tip&quot; class=&quot;el-upload__tip&quot;&gt;&#10;              只能上传jpg/png文件，且不超过500kb&#10;            &lt;/div&gt;&#10;          &lt;/el-upload&gt;&#10;        &lt;/el-form-item&gt;&#10;      &lt;/template&gt;&#10;    &lt;/el-form&gt;&#10;  &lt;/div&gt;&#10;&lt;/template&gt;&#10;&#10;&lt;script&gt;&#10;export default {&#10;  name: 'baseForm',&#10;  props: {&#10;    formProps: {&#10;      type: Object,&#10;      required: true,&#10;    },&#10;  },&#10;  data() {&#10;    return {&#10;      form: {},&#10;    }&#10;  },&#10;}&#10;&lt;/script&gt;&#10;```&#10;&#10;">
      </outline>
    </outline>
  </outline>
</outline>
<outline text="微燃机">
  <outline text="泛能画像：">
    <outline text="canvas使用">
      <outline text="页面定义" _note="``` {.html}&#10;&lt;canvas id=&quot;analysis-canvas&quot;&gt;您当前的版本不支持&lt;/canvas&gt;&#10;```">
      </outline>
      <outline text="初始化" _note="``` {.javascript}&#10;initCanvas() {&#10;  canvas = document.getElementById('analysis-canvas')&#10;  ctx = canvas.getContext('2d')&#10; &#10;  canvas.width = 1000&#10;  canvas.height = 500&#10;  canvas.style.backgroundColor = '#ffcccc'&#10;  this.drawLineCanvas()&#10;},&#10;```&#10;&#10;这里要注意调用初始化函数要在mounted()中调用，否则无法获取到canva的dom元素。还有就是canvas以及ctx要定义全局变量，因为此处全局多个函数都要使用。">
      </outline>
      <outline text="绘制直线函数" _note="``` {.javascript}&#10;// 绘制直线&#10;drawLineCanvas() {&#10;  // 设置线条的颜色&#10;  ctx.strokeStyle = '#000'&#10;  // 设置线条的宽度&#10;  ctx.lineWidth = 5&#10;  // 绘制直线&#10;  ctx.beginPath()&#10;  // 起点&#10;  ctx.moveTo(200, 200)&#10;  // 终点&#10;  ctx.lineTo(500, 200)&#10;  ctx.closePath()&#10;  ctx.stroke()&#10;},&#10;```">
      </outline>
      <outline text="绘制圆/扇形" _note="``` {.javascript}&#10;// 绘制圆/扇形&#10;drawArcCanvas() {&#10;  ctx.beginPath()&#10;  /*&#10;   * params&#10;   * 圆心x坐标&#10;   * 圆心y坐标&#10;   * 半径&#10;   * 起始角度&#10;   * 结束角度&#10;   * 方向，true 逆时针   false 顺时针  默认false，不写表示false&#10;   */&#10;  //顺时针封口扇形&#10;  ctx.arc(200, 200, 100, 0, Math.PI / 2, false)&#10;  ctx.strokeStyle = 'red'&#10;  ctx.closePath()&#10;  ctx.stroke()&#10;&#10;  ctx.beginPath()&#10;  //逆时针不封口扇形&#10;  ctx.arc(100, 100, 50, this.angleToRadian(0), this.angleToRadian(90), true)&#10;  ctx.strokeStyle = 'deepskyblue'&#10;  ctx.stroke()&#10;},&#10;```&#10;&#10;需要注意的是&#10;&#10;1.  ctx.closePath()会给绘制的曲线，起点和终点用直线连接，从而得到封闭图形，如果不想要封闭图形则不要加&#10;&#10;2.  ctx.stroke()是将刚刚的画笔所经过的路径绘制在页面的函数，如果不调用是不会显示在页面上的。&#10;&#10;3.  ctx.beginPath()是画笔落下开始绘制，如果想要绘制两个不相干的曲线就要加上这一句，如图1所示。如果想要绘制的效果是，前一个曲线的最后一个点，和当前曲线的起点相连接，就不要加上这句，这样前面的曲线和后面的曲线就是同一笔，就会连接起来且画笔粗细颜色等也是相同的，如图二。&#10;&#10;    ![](C:\Users\yaotingtinga\AppData\Roaming\Typora\typora-user-images\image-20220302185414055.png)&#10;&#10;图1&#10;&#10;![](C:\Users\yaotingtinga\AppData\Roaming\Typora\typora-user-images\image-20220302185443533.png)&#10;&#10;图2">
      </outline>
      <outline text="贝塞尔曲线" _note="贝塞尔曲线由三点确定一条曲线，由moveTo(x0,y0)确定起点，quadraticCurveTo(x1,y1,x2,y2)，确定控制点和终点。起点和终点两点确定一条直线，控制点决定曲线哪个方向凸起，并决定曲线形状。&#10;&#10;``` {.javascript}&#10;quadraticCurve() {&#10;  ctx.moveTo(200, 400)&#10;  ctx.quadraticCurveTo(300, 300, 400, 400)&#10;  ctx.stroke()&#10;},&#10;```">
      </outline>
      <outline text="绘制基础图形" _note="其实通过直线和扇形组合已经可以完成大部分基础图形的绘制，如绘制矩形的函数可以通过组合起始点不同的直线绘制：">
        <outline text="用直线拼接无填充矩形" _note="``` {.javascript}&#10;drawUnfilledRectangle() {&#10;  ctx.strokeStyle = '#00'&#10;  ctx.fillStyle = '#e6c7ff'&#10;  ctx.lineWidth = 2 // 设置线段宽度&#10;  ctx.beginPath() // 开始点&#10;  ctx.moveTo(30, 30)&#10;  ctx.lineTo(230, 30)&#10;  ctx.lineTo(230, 200)&#10;  ctx.lineTo(30, 200)&#10;  ctx.lineTo(30, 30)&#10;  // ctx.closePath()&#10;  ctx.stroke() // 进行绘制外边框&#10;},&#10;```&#10;&#10;值得注意的是最后一条直线可以不用绘制，使用ctx.closePath()语句可以直接封口。">
        </outline>
        <outline text="用直线拼接有填充矩形" _note="``` {.javascript}&#10;// 用四条直线绘制填充矩形&#10;drawFilledRectangle() {&#10;  ctx.beginPath()&#10;  ctx.moveTo(300, 30)&#10;  ctx.lineTo(500, 30)&#10;  ctx.lineTo(500, 200)&#10;  ctx.lineTo(300, 200)&#10;  ctx.lineTo(300, 30)&#10;  ctx.fill() // 进行内容填充&#10;  ctx.stroke() // 进行绘制外边框&#10;},&#10;```&#10;&#10;1.  这里的语句ctx.fill()，就是给矩形填充&#10;&#10;2.  ctx.fillStyle设置填充的颜色，strokeStyle设置的是画笔的颜色&#10;&#10;对比如图：&#10;&#10;![](C:\Users\yaotingtinga\AppData\Roaming\Typora\typora-user-images\image-20220322201410081.png)">
        </outline>
        <outline text="rect()绘制矩形" _note="当然canvas中有绘制矩形自带的方法：rect(x, y, width,&#10;height)，参数是左上角坐标加上宽高。&#10;&#10;``` {.javascript}&#10;drawRect() {&#10;  ctx.strokeStyle = '#00'&#10;  ctx.fillStyle = '#9f9'&#10;  ctx.lineWidth = 2&#10;  // 绘制非填充矩形&#10;  ctx.beginPath()&#10;  ctx.rect(550, 30, 200, 150)&#10;  ctx.stroke()&#10;  // 绘制非填充矩形&#10;  ctx.beginPath()&#10;  ctx.rect(800, 30, 200, 200)&#10;  ctx.fill()&#10;},&#10;```&#10;&#10;如图：&#10;&#10;![](C:\Users\yaotingtinga\AppData\Roaming\Typora\typora-user-images\image-20220322202225064.png)">
        </outline>
        <outline text="fillRect() / strokeRect()" _note="fillRect()绘制填充矩形和strokeRect()绘制边框矩形，参数和和rect()一样。">
        </outline>
      </outline>
      <outline text="三次方贝塞尔曲线" _note="微燃机泛能画像项目中，需要展示不规则的图形如下：&#10;&#10;![](C:\Users\yaotingtinga\AppData\Roaming\Typora\typora-user-images\image-20220322202749671.png)&#10;&#10;该图形拿到手，其实可以分成五部分，又红色边框框柱的四部分曲线，以及紫色部分框住的直线。第5部分全部由直线组成非常好处理，只要确定好位置即可。最难处理的是1、2、3、4部分，其实1、2、3、4部分是有规律的，左右两边图形左右翻转，上下图形镜面翻转。所以烤炉是否有函数图像能将其表示。&#10;&#10;![](C:\Users\yaotingtinga\AppData\Roaming\Typora\typora-user-images\image-20220322203123816.png)&#10;&#10;一开始考虑贝塞尔曲线的组合，但是需要两个贝塞尔曲线的拼接，而且很难保证拼接处重合，所以我又发现了一个三次贝塞尔曲线，具有两个控制点，可以调整出图片的样子。&#10;&#10;同二次贝塞尔，moveTo(x0,y0)确定起点，ctx.bezierCurveTo(x1, y1, x2, y2,&#10;x, y)，确定两个控制点和终点。由于可以决定两个方向的弯曲，所以方案可行。&#10;&#10;``` {.javascript}&#10;bezierCurve() {&#10;  ctx.strokeStyle = '#FA7E2A'&#10;  ctx.beginPath()&#10;  ctx.moveTo(455, 375)&#10;  ctx.bezierCurveTo(430, 80, 650, 550, 650, 350)&#10;  ctx.stroke()&#10;},&#10;```&#10;&#10;&#10;![](C:\Users\yaotingtinga\AppData\Roaming\Typora\typora-user-images\image-20220323140731494.png &quot;fig:&quot;)&#10;&#10;如图确定了起始点和终点，可以往两个方向拉伸，不过还有一个问题，就是控制点比较难以控制，如何控制好曲线形状，可以选用辅助工具，如https://cubic-bezier.com/\#1,.01,0,1，这个网站可以通过需要调整曲线形状，得到控制点的坐标，最后在项目中调整坐标定位到合适的位置。">
      </outline>
    </outline>
  </outline>
  <outline text="单站 / 全国">
    <outline text="echart使用">
      <outline text="安裝依赖包" _note="``` {.}&#10;npm install echarts&#10;```">
      </outline>
      <outline text="引入echarts" _note="``` {.javascript}&#10;import echarts from 'echarts'&#10;```">
      </outline>
      <outline text="页面确定echart区域" _note="注意一定要给div添加宽高，否则无法显示。&#10;&#10;``` {.vue}&#10;&lt;div id=&quot;chart_example&quot;&gt;&lt;/div&gt;&#10;&lt;style scoped lang=&quot;less&quot;&gt;&#10;  #chart_example {&#10;    width: 500px;&#10;    height: 500px;&#10;    border: 1px solid red;&#10;    margin: 0 auto;&#10;  }&#10;&lt;/style&gt;&#10;```">
      </outline>
      <outline text="定义数据、图表样式" _note="echart是集成的组件，通过向传输对象格式的数据，控制组件想要的参数。&#10;&#10;``` {.javascript}&#10; data() {&#10;    return {&#10;      option: {&#10;        color: ['#f44'],&#10;        tooltip: {&#10;          trigger: 'axis',&#10;          axisPointer: {&#10;            type: 'shadow',&#10;          },&#10;        },&#10;        xAxis: [&#10;          {&#10;            type: 'category',&#10;            data: [&#10;              '1月',&#10;              '2月',&#10;              '3月',&#10;              '4月',&#10;              '5月',&#10;              '6月',&#10;              '7月',&#10;              '8月',&#10;              '9月',&#10;              '10月',&#10;              '11月',&#10;              '12月',&#10;            ],&#10;            axisTick: {&#10;              alignWithLabel: true,&#10;            },&#10;          },&#10;        ],&#10;        yAxis: [&#10;          {&#10;            type: 'value',&#10;          },&#10;        ],&#10;        series: [&#10;          {&#10;            name: '每月花费',&#10;            type: 'bar',&#10;            barWidth: '60%',&#10;            data: [995, 666, 444, 858, 654, 236, 645, 546, 846, 225, 547, 356],&#10;          },&#10;        ],&#10;      },&#10;    }&#10;  },&#10;```">
      </outline>
      <outline text="初始化" _note="``` {.javascript}&#10;initEchart() {&#10;  let myChart = echarts.init(document.getElementById('chart_example'))&#10;  myChart.setOption(this.option)&#10;},&#10;```">
      </outline>
    </outline>
    <outline text="echart组件的构建" _note="一个项目相同、不同组件中可能有多次使用到相同样式的图标，重复开发会导致代码冗余、不同人开发的细微样式出入等，所以主要构建统一组件，实现样式统一但数据不同的目的。">
      <outline text="props传输必要参数" _note="把项目中图表不变的因素写到子组件中，如的主题颜色，是否有悬浮提示，悬浮框样式等内容。把需要展示的动态值携程变量通过porps传输。">
      </outline>
      <outline text="监听父组件数据更新" _note="当父组件数据更新时，porps只会在子组件构建时传输一次，所以要设置监听。&#10;&#10;两点注意：">
        <outline text="父组件修改什么值" _note="如果父组件修改的是对象里的某一个值，受ES5的限制，Vue.js不能检测到对象属性的添加或删除。如果父组件修改的是整个对象，则可以在子组件监听这个对象。&#10;&#10;父组件&#10;&#10;``` {.javascript}&#10;this.chartData = {&#10;	xlist: ['2018年', '2019年', '2021年', '2022年'],&#10;	ylist: [100, 200, 100, 300],&#10;}&#10;```&#10;&#10;子组件&#10;&#10;``` {.javascript}&#10;chartData: {&#10;  immediate: true,&#10;  handler: function (newVal, oldVal) {&#10;    this.initEchart()&#10;  },&#10;},&#10;```">
        </outline>
        <outline text="子组件的option定义的位置" _note="不要定义在data里，要定义在函数中。因为data中的数据在构建的时候创建一次，其中定义的变量不会再随着变量值的改变而改变。&#10;&#10;``` {.javascript}&#10;initEchart() {&#10;  let myChart = echarts.init(document.getElementById('chart_example'))&#10;  myChart.setOption({&#10;    title: {&#10;      text: this.config.showText,&#10;    },&#10;    color: ['#f44'],&#10;    tooltip: {&#10;      trigger: 'axis',&#10;      axisPointer: {&#10;        type: 'shadow',&#10;      },&#10;    },&#10;    xAxis: [&#10;      {&#10;        type: 'category',&#10;        data: this.chartData.xlist,&#10;        axisTick: {&#10;          alignWithLabel: true,&#10;        },&#10;      },&#10;    ],&#10;    yAxis: [&#10;      {&#10;        type: 'value',&#10;      },&#10;    ],&#10;    series: [&#10;      {&#10;        name: '每月花费',&#10;        type: 'bar',&#10;        barWidth: '60%',&#10;        data: this.chartData.ylist,&#10;      },&#10;    ],&#10;  })&#10;},&#10;```">
        </outline>
      </outline>
      <outline text="添加数据格式化" _note="``` {.javascript}&#10;axisLabel: {&#10;  formatter: function (val) {&#10;    return val + '❤'&#10;  },&#10;},&#10;```">
      </outline>
      <outline text="自定义组件工具栏图标" _note="toolbox有自带的工具图标，当自带的图标不能满足需要时，可采用以下方法：&#10;&#10;``` {.vue}&#10;&lt;div&#10;  :class=&quot;{ fullChart: true, fullActive: enlarge }&quot;&#10;  ref=&quot;fullChart&quot;&#10;&gt;&lt;/div&gt;&#10;&#10;&lt;script&gt;&#10;data() {&#10;	return { enlarge: false, myChart: null }&#10;},&#10;&lt;/script&gt;&#10;&#10;&lt;style scoped lang=&quot;less&quot;&gt;&#10;.base-echart {&#10;  height: 100%;&#10;  width: 100%;&#10;  overflow: hidden;&#10;  flex: 1;&#10;  box-sizing: border-box;&#10;  height: 500px;&#10;&#10;}&#10;#chart_example {&#10;	width: 50%;&#10;	height: 500px;&#10;}&#10;.fullChart {&#10;    background-color: antiquewhite;&#10;    display: none;&#10;    padding-left: 59px;&#10;    padding-right: 10px;&#10;    width: 100vh;&#10;    height: 100vw;&#10;    top: 50%;&#10;    left: 50%;&#10;    transform: translate3d(-50%, -50%, 0) rotate(90deg);&#10;    background: #fff;&#10;    position: fixed !important;&#10;    z-index: 1001;&#10;    box-sizing: border-box;&#10;}&#10;.fullActive {&#10;	display: block;&#10;}&#10;&lt;/style&gt;&#10;```&#10;&#10;``` {.javascript}&#10;toolbox: {&#10;  right: 25,&#10;  top: 5,&#10;  feature: {&#10;    myFull: {&#10;      show: true,&#10;      title: '全屏查看',&#10;      icon:&#10;        'path://M161.568 188.352l0 0.16 0 202.912c0 15.52 12.608 28.096 28.096 28.096s28.096-12.608 28.096-28.096l0-130.88 162.656 178.944c10.432 11.52 28.096 12.288 39.616 1.856 11.52-10.432 12.288-28.096 1.856-39.616L252.48 215.552l140.704 0c15.52 0 28.096-12.608 28.096-28.096s-12.608-28.096-28.096-28.096L190.272 159.36c-6.912 0-13.376 2.464-18.112 6.752C171.712 166.4 171.232 166.848 170.784 167.328 164.64 172.864 161.568 180.672 161.568 188.352L161.568 188.352 161.568 188.352z' +&#10;        'M862.432 188.352l0 0.16 0 202.912c0 15.52-12.608 28.096-28.096 28.096-15.52 0-28.096-12.608-28.096-28.096l0-130.88-162.656 179.104c-10.432 11.52-28.096 12.288-39.616 1.856-11.52-10.432-12.288-28.096-1.856-39.616l169.408-186.304-140.704 0c-15.52 0-28.096-12.608-28.096-28.096s12.608-28.096 28.096-28.096l202.912 0c6.912 0 13.376 2.464 18.112 6.752 0.448 0.32 0.928 0.768 1.376 1.216C859.36 172.864 862.432 180.672 862.432 188.352L862.432 188.352 862.432 188.352z' +&#10;        'M161.568 835.488l0-0.16 0-202.912c0-15.52 12.608-28.096 28.096-28.096s28.096 12.608 28.096 28.096l0 130.88 162.656-178.944c10.432-11.52 28.096-12.288 39.616-1.856 11.52 10.432 12.288 28.096 1.856 39.616L252.48 808.288l140.704 0c15.52 0 28.096 12.608 28.096 28.096s-12.608 28.096-28.096 28.096L190.272 864.48c-6.912 0-13.376-2.464-18.112-6.752-0.448-0.32-0.928-0.768-1.376-1.216C164.64 851.008 161.568 843.328 161.568 835.488L161.568 835.488 161.568 835.488z' +&#10;        'M862.432 835.488l0-0.16 0-202.912c0-15.52-12.608-28.096-28.096-28.096-15.52 0-28.096 12.608-28.096 28.096l0 130.88-162.656-178.944c-10.432-11.52-28.096-12.288-39.616-1.856-11.52 10.432-12.288 28.096-1.856 39.616l169.408 186.304-140.704 0c-15.52 0-28.096 12.608-28.096 28.096s12.608 28.096 28.096 28.096l202.912 0c6.912 0 13.376-2.464 18.112-6.752 0.448-0.32 0.928-0.768 1.376-1.216C859.36 851.008 862.432 843.328 862.432 835.488L862.432 835.488 862.432 835.488z',&#10;      onclick: (e) =&gt; {&#10;        let opts = e.getOption()&#10;        // opts.toolbox[0].feature.myFull.show = false&#10;        console.log('opts.toolbox[0] :&gt;&gt; ', opts.toolbox[0])&#10;        this.enlarge = !this.enlarge&#10;        this.$nextTick(() =&gt; {&#10;          let fullchart = echarts.init(this.$refs.fullChart)&#10;          fullchart.setOption(opts)&#10;        })&#10;      },&#10;      iconStyle: {&#10;        color: '##0780ED',&#10;      },&#10;    },&#10;  },&#10;},&#10;```">
        <outline text="工具栏图标" _note="icon后面跟的是工具栏图标的svg，获取矢量图的方法是从阿里巴巴矢量图官网https://www.iconfont.cn/，搜索/上传想要的图，点击svg模式下载，打开svg格式的图片，将d属性之后的全部内容进行拷贝，因为有的矢量图是多个矢量拼接而成，所以可能有多个d，都要拷贝出来进行拼接。">
        </outline>
        <outline text="点击图标触发的事件" _note="onclick后面就是图标实现功能的函数&#10;&#10;e.getoption()是e事件中的原型里的函数，用来获取到你在e中option中的所有配置项，可以在其中对echart的参数进行任意修改。e.setoption()就是对echart的option重新赋值，刷新图表。&#10;&#10;![](C:\Users\yaotingtinga\AppData\Roaming\Typora\typora-user-images\image-20220325175759465.png)&#10;&#10;opts.toolbox是图标工具栏数组，存的是你配置的所有工具栏，按顺序取值，可以获取到某一工具按钮。`opts.toolbox[0].feature.myFull.show = false`是设置工具栏隐藏，这个是按照交互规定来设置的，enlarge是用来控制放大后的div画布显示或隐藏，显示画布的样式fullActive注意写在fullChart下方，放大后的画布显示出来后，等页面完全渲染成功，重新将这个div定义为画布，并绘制图表。">
        </outline>
      </outline>
    </outline>
    <outline text="轮播图注意事项">
    </outline>
  </outline>
  <outline text="vant 和 element ui" _note="input删除按钮隐藏的思考&#10;&#10;修改日期的组件的背景色">
  </outline>
  <outline text="vant日期组件没有年月日时">
  </outline>
</outline>
  </body>
</opml>
